//Solution 1
class Solution {
    public int rangeSumBST(TreeNode root, int L, int R) {
		//node is null
        if(root == null){
            return 0;
        }
		// The value of the current node is less than L
        if(root.val < L){
            return rangeSumBST(root.right,L,R);
        }
		//The value of the current node is greater than R
		else if(root.val > R){
            return rangeSumBST(root.left,L,R);
            
        }else{
			//The value of the current node is between L and R
            return rangeSumBST(root.left,L,R) + root.val + rangeSumBST(root.right,L,R);
        }
    }
}

//Solution 2
class Solution {
    private int sum = 0;
    public int rangeSumBST(TreeNode root, int L, int R) {
        if(root != null){
            if(root.val>= L && root.val <=R){
                sum += root.val;
                rangeSumBST(root.left,L,R);
                rangeSumBST(root.right,L,R);
            }
            if(root.val > R)rangeSumBST(root.left,L,R);
            if(root.val < L)rangeSumBST(root.right,L,R);
        }
        return sum;
    }
}
